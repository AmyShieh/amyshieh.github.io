"use strict";(self.webpackChunkmy_docusaurus_blog=self.webpackChunkmy_docusaurus_blog||[]).push([[7406],{15680:(n,e,a)=>{a.d(e,{xA:()=>s,yg:()=>f});var t=a(96540);function r(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function l(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function i(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function g(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},l=Object.keys(n);for(t=0;t<l.length;t++)a=l[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(t=0;t<l.length;t++)a=l[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var m=t.createContext({}),o=function(n){var e=t.useContext(m),a=e;return n&&(a="function"==typeof n?n(e):i(i({},e),n)),a},s=function(n){var e=o(n.components);return t.createElement(m.Provider,{value:e},n.children)},p="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var a=n.components,r=n.mdxType,l=n.originalType,m=n.parentName,s=g(n,["components","mdxType","originalType","parentName"]),p=o(a),u=r,f=p["".concat(m,".").concat(u)]||p[u]||c[u]||l;return a?t.createElement(f,i(i({ref:e},s),{},{components:a})):t.createElement(f,i({ref:e},s))}));function f(n,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var l=a.length,i=new Array(l);i[0]=u;var g={};for(var m in e)hasOwnProperty.call(e,m)&&(g[m]=e[m]);g.originalType=n,g[p]="string"==typeof n?n:r,i[1]=g;for(var o=2;o<l;o++)i[o]=a[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},62161:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>g,toc:()=>o});var t=a(58168),r=(a(96540),a(15680));const l={},i="Go",g={unversionedId:"be/go/index",id:"be/go/index",title:"Go",description:"\ud83d\udc31\u200d\ud83d\udcbb Go Numeric Types (bits) - https://golang.org/ref/spec",source:"@site/docs/be/go/index.md",sourceDirName:"be/go",slug:"/be/go/",permalink:"/docs/be/go/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u540e\u7aef",permalink:"/docs/category/\u540e\u7aef"},next:{title:"java",permalink:"/docs/be/java/"}},m={},o=[{value:"Print",id:"print",level:2},{value:"array",id:"array",level:2},{value:"sort &amp; strings lib",id:"sort--strings-lib",level:2},{value:"for \u5faa\u73af\u3010index,value\u3011",id:"for-\u5faa\u73afindexvalue",level:2},{value:"while",id:"while",level:3},{value:"for",id:"for",level:3},{value:"range (for of)",id:"range-for-of",level:3},{value:"condition for loop",id:"condition-for-loop",level:3},{value:"function call",id:"function-call",level:2},{value:"multiple value return",id:"multiple-value-return",level:2},{value:"package ref",id:"package-ref",level:2},{value:"package call shell",id:"package-call-shell",level:3},{value:"Map\u3010key, value\u3011",id:"mapkey-value",level:2},{value:"passing value",id:"passing-value",level:2},{value:"pointer",id:"pointer",level:2},{value:"Custom type &amp; struct",id:"custom-type--struct",level:2}],s={toc:o},p="wrapper";function c(n){let{components:e,...a}=n;return(0,r.yg)(p,(0,t.A)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"go"},"Go"),(0,r.yg)("p",null,"\ud83d\udc31\u200d\ud83d\udcbb Go Numeric Types (bits) - ",(0,r.yg)("a",{parentName:"p",href:"https://golang.org/ref/spec"},"https://golang.org/ref/spec"),"\n\ud83d\udc31\u200d\ud83d\udcbb Go Standard Library (bits) - ",(0,r.yg)("a",{parentName:"p",href:"https://golang.org/pkg/"},"https://golang.org/pkg/")),(0,r.yg)("h2",{id:"print"},"Print"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},' // Println, Printf, Print, Sprintf\npackage main\n\nimport "fmt"\n\nfunc main() {\n    name := "amy"\n    age := 18\n    fmt.Print("hello, ")\n    fmt.Println("world!")\n    fmt.Print("amy! \\n")\n    fmt.Print("my name is ", name)\n    fmt.Println("my age is ", age)\n\n    fmt.Printf("my name is %v and my age is %v \\n", name, age)\n    fmt.Printf("my name is %q and my age is %v \\n", name, age)\n    fmt.Printf("age is of type %T \\n", age)\n    fmt.Printf("you scored %f points \\n", 7.19)\n    fmt.Printf("you scored %0.1f points \\n", 7.19)\n\n    var str = fmt.Sprintf("my name is %v and my age is %v \\n", name, age)\n    fmt.Printf("the saved string is: %v", str)\n}\n')),(0,r.yg)("h2",{id:"array"},"array"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},' // array slice & append\npackage main\n\nimport "fmt"\n\nfunc main() {\n    names := []string{"amy", "Shieh", "aliveAmy"}\n    fmt.Println(names, len(names))\n    names = append(names, "changqing")\n    fmt.Println(names, len(names))\n\n    startNames := names[:3]\n    fmt.Println(names, len(names), startNames, len(startNames))\n\n    endNames := names[1:]\n    fmt.Println(endNames)\n\n    middleNames := names[0:2]\n    fmt.Println(middleNames)\n}\n')),(0,r.yg)("h2",{id:"sort--strings-lib"},"sort & strings lib"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'\npackage main\n\nimport (\n    "fmt"\n    "sort"\n    "strings"\n)\n\nfunc main() {\n    greeting := "hello there~"\n    //Contains\n    fmt.Println(strings.Contains(greeting, "he"))\n    //ReplaceAll\n    fmt.Println(strings.ReplaceAll(greeting, "hello", "Hi!"))\n    //ToUpper\n    fmt.Println(strings.ToUpper("amy"))\n    //Index\n    fmt.Println(strings.Index("aliveAmy", "a"))\n    //Split\n    fmt.Println(strings.Split("aliveAmy", "a"))\n\n    ages := []int{7,19,3,4,5,6}\n    //Sort.Int\n    sort.Ints(ages)\n    fmt.Println(ages)\n    //Sort.SearchInts\n    fmt.Println(sort.SearchInts(ages, 19))\n\n    names := []string{"xie", "chang", "qing", "alive", "amy"}\n    //Sort.Strings\n    sort.Strings(names)\n    fmt.Println(names)\n    //Sort.SearchStrings\n    fmt.Println(sort.SearchStrings(names, "amy"))\n}\n\n')),(0,r.yg)("h2",{id:"for-\u5faa\u73afindexvalue"},"for \u5faa\u73af\u3010index,value\u3011"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'names := []string{"xie", "chang", "qing", "alive", "amy", "aliveAmy"}\n')),(0,r.yg)("h3",{id:"while"},"while"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'i := 0\nfor i < 7 {\n    fmt.Printf("Value of x is %v", i);\n    i++\n}\n')),(0,r.yg)("h3",{id:"for"},"for"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'\nfor i := 0; i < 7; i++ {\n    fmt.Printf("i is %v", i)\n}\n\n')),(0,r.yg)("h3",{id:"range-for-of"},"range (for of)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'\nfor index, value := range names {\n    fmt.Printf("the index %v of name %v is", index, name)\n}\n\nfor _, value := range names {\nfmt.Printf("the name %v is", name)\n}\n\n')),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-go"},'for _, value := range name {\n    value = "new name"\n}\n\nfmt.Println(names)  //[xie chang qing alive amy aliveAmy]\n\n')),(0,r.yg)("p",{parentName:"admonition"},"It does not change the original value")),(0,r.yg)("h3",{id:"condition-for-loop"},"condition for loop"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'\nnames := []string{"xie", "chang", "qing", "alive", "amy", "aliveAmy"}\n\n    for index, name := range names {\n        if index == 0 {\n            fmt.Println("ignore it")\n            continue\n        }\n\n        if index == (len(names) - 1) {\n            fmt.Printf("%v is the last one\\n", name)\n            break\n        }\n\n        fmt.Printf("the pos %v of name %v is \\n", index, name)\n\n    }\n\n')),(0,r.yg)("h2",{id:"function-call"},"function call"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'package main\nimport (\n    "fmt"\n    "math"\n)\n\nfunc greeting(p string) {\n    fmt.Printf("Good morning %v ! \\n", p)\n}\n\nfunc greeting2EveryOne(names []string, f func(name string)) {\n    for _, name := range names {\n        f(name)\n    }\n}\n\nfunc calculateCircleArea(r float64) float64 {\n    return math.Pi * r * r\n}\n\n\nfunc main() {\n    names := []string{"xie", "chang", "qing", "alive", "amy", "aliveAmy"}\n    greeting( "amy")\n    greeting2EveryOne(names, greeting)\n    circle1 := calculateCircleArea(2.5)\n    circle2 := calculateCircleArea(5)\n\n    fmt.Printf("circle1\'s area is %0.1f, circle2\'s area is %0.3f",  circle1, circle2)\n}\n')),(0,r.yg)("h2",{id:"multiple-value-return"},"multiple value return"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "strings"\n)\n\n//go\u4e2d\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\u5c31\u662f\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u90a3\u5047\u5982\u53c2\u6570\u5f88\u591a\u7684\u65f6\u5019\uff0c\u6709\u6ca1\u6709\u66f4\u597d\u5730\u5199\u6cd5\u5462\uff1f\nfunc getMultipleName(n string) (string, string) {\n    names := strings.Split(n, " ")\n    if len(names) > 1 {\n        // \u611f\u89c9\u6709\u70b9\u50cfjs\u4e2d\u6570\u7ec4\u3001\u5bf9\u8c61\u89e3\u6784\u8d4b\u503c\u7684\u5199\u6cd5\u5462~\n        return names[0], names[1]\n    }\n    return names[0], "_"\n}\n\nfunc main()  {\n    firstName, lastName := getMultipleName("alive Amy")\n    firstName1, lastName1 := getMultipleName("alive")\n    fmt.Println(firstName, lastName)\n    fmt.Println(firstName1, lastName1)\n}\n\n')),(0,r.yg)("h2",{id:"package-ref"},"package ref"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="parent.go"',title:'"parent.go"'},'package main\nimport "fmt"\nvar hobbies = []string{"reading", "painting"}\nfunc main() {\n    sayHello("amy")\n    for _, value := range getNamesFromChild {\n        fmt.Println(value)\n    }\n    getValueFromParent()\n}\n\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="child.go"',title:'"child.go"'},'package main\nimport "fmt"\n\nvar getNamesFromChild = []string{"xie", "chang", "qing", "alive", "amy", "aliveAmy"}\n\nfunc sayHello(name string)  {\n    fmt.Printf("hello, %v", name)\n}\nfunc getValueFromParent() {\n    for _, value := range hobbies{\n        fmt.Println(value)\n    }\n}\n\n')),(0,r.yg)("h3",{id:"package-call-shell"},"package call shell"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"\ngo run parent.go child.go\n\n")),(0,r.yg)("h2",{id:"mapkey-value"},"Map\u3010key, value\u3011"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'package main\nimport "fmt"\n\nfunc main() {\n    names := map[int]string {\n        0: "amy",\n        1: "aliveAmy",\n        2: "changqing",\n        3: "amyShieh",\n    }\n\n    for key, value := range names {\n        fmt.Println(key, "-", value)\n    }\n}\n\n')),(0,r.yg)("h2",{id:"passing-value"},"passing value"),(0,r.yg)("p",null,'"\u5f15\u7528\u7c7b\u578b"\u7684\u5b58\u50a8\uff1a\u5806\u6808, address => stack, value => heap reference\n"\u57fa\u672c\u7c7b\u578b"\u7684\u5b58\u50a8: stack\uff0c copies'),(0,r.yg)("table",null,(0,r.yg)("tr",null,(0,r.yg)("th",null,"basic"),(0,r.yg)("th",null,"reference")),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("p",null,"Strings"),(0,r.yg)("p",null,"Ints"),(0,r.yg)("p",null,"floats"),(0,r.yg)("p",null,"Booleans"),(0,r.yg)("p",null,"Arrary")),(0,r.yg)("td",null,(0,r.yg)("p",null,"Slices"),(0,r.yg)("p",null,"Maps"),(0,r.yg)("p",null,"Functions")))),(0,r.yg)("h2",{id:"pointer"},"pointer"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\nfunc updateName(n *string)  {\n    *n = "aliveAmy"\n}\n\nfunc main()  {\n    name := "amy"\n    position := &name\n    fmt.Println("original name", name)\n    updateName(position)\n    fmt.Println("changed name", name)\n}\n\n')),(0,r.yg)("h2",{id:"custom-type--struct"},"Custom type & struct"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="bill.go"',title:'"bill.go"'},"\npackage main\n\ntype bill struct {\n    name string\n    items map[string] float64\n    tips float64\n}\n\nfunc newBill(name string) bill {\n    myBill := bill{\n        name: name,\n        items: map[string]float64 {},\n        tips: 0,\n    }\n    return myBill\n}\n\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="mian.go"',title:'"mian.go"'},'\npackage main\n\nimport "fmt"\n\nfunc main()  {\n    fmt.Println(newBill("amy\'s bill"))\n}\n\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"go run main.go bill.go\n")))}c.isMDXComponent=!0}}]);